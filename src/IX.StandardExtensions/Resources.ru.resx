<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UndoAndRedoOperationsAreNotSupportedWhileAnExplicitTransactionBlockIsOpen" xml:space="preserve">
    <value>Операции отмены и повтора не поддерживаются, пока открыт явный блок транзакций.</value>
  </data>
  <data name="ErrorLengthGoesPastArrayLimits" xml:space="preserve">
    <value>Длина должна быть достаточно мала, чтобы не привести к операции за пределами массива.</value>
  </data>
  <data name="ErrorLengthMustBeAPositiveInteger" xml:space="preserve">
    <value>Длина должна быть положительным целым числом.</value>
  </data>
  <data name="ErrorNotImplementedByDesign" xml:space="preserve">
    <value>Этот элемент не реализован по замыслу.</value>
  </data>
  <data name="ErrorSourceIndexMustPointToALocationWithinTheArray" xml:space="preserve">
    <value>Исходный индекс должен указывать на расположение в массиве.</value>
  </data>
  <data name="ErrorArgumentInvalidType" xml:space="preserve">
    <value>Предоставленный коробчатый или полиморфный аргумент неправильного типа.</value>
  </data>
  <data name="ErrorStopRetrying" xml:space="preserve">
    <value>Операция, вызвавшая этот метод, должна прекратить повторную попытку, так как критическая ошибка, изменение состояния или невосстановимые условия среды гарантируют сбой при последующих повторных попытках.</value>
  </data>
  <data name="ErrorArgumentNotPositiveInteger" xml:space="preserve">
    <value>Аргумент не является положительным целым числом.</value>
  </data>
  <data name="SingleOrDefaultMultipleElements" xml:space="preserve">
    <value>Входная последовательность содержит более одного элемента.</value>
  </data>
  <data name="AnInvalidSetOfArgumentsWasSpecifiedArgumentNames" xml:space="preserve">
    <value>Указан недопустимый набор аргументов. Имена аргументов: {0}</value>
  </data>
  <data name="TheProvidedArgumentsDoNotFormAValidRangeOfValuesArguments" xml:space="preserve">
    <value>Предоставленные аргументы не образуют допустимый диапазон значений. Аргументы: {0}</value>
  </data>
  <data name="ErrorArgumentNotPositive" xml:space="preserve">
    <value>Аргумент не является положительным числом.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyString" xml:space="preserve">
    <value>Строковый аргумент имеет значение null (Nothing в Visual Basic) или пустой.</value>
  </data>
  <data name="ErrorArgumentNullOrWhiteSpaceString" xml:space="preserve">
    <value>Строковый аргумент имеет значение null (Nothing в Visual Basic), пустой или только пробел.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyBinary" xml:space="preserve">
    <value>Аргумент имеет значение null (Nothing в Visual Basic) или пустой массив байтов.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyCollection" xml:space="preserve">
    <value>Аргумент коллекции имеет значение null (Nothing в Visual Basic) или пуст.</value>
  </data>
  <data name="AContractConditionIsNotBeingMet" xml:space="preserve">
    <value>Условие контракта не выполняется.</value>
  </data>
  <data name="ErrorArgumentNotValidIndex" xml:space="preserve">
    <value>Аргумент нельзя считать допустимым индексом.</value>
  </data>
  <data name="ErrorArgumentNotValidLength" xml:space="preserve">
    <value>Аргумент нельзя считать допустимой длиной, так как он должен быть положительным целым числом, меньшим длины коллекции, для которого он используется.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyArray" xml:space="preserve">
    <value>Аргумент массива имеет значение null (Nothing в Visual Basic), или пуст, или не имеет требуемой длины.</value>
  </data>
  <data name="ErrorArgumentDoesNotMatch" xml:space="preserve">
    <value>Аргумент не соответствует ожидаемому шаблону или не может быть неявно сопоставлен с любым поддерживаемым входным данным.</value>
  </data>
  <data name="ErrorArgumentInvalidPath" xml:space="preserve">
    <value>Предоставленный аргумент нельзя использовать в качестве допустимого пути.</value>
  </data>
  <data name="MoveNextNotInvoked" xml:space="preserve">
    <value>Перед вызовом метода Current необходимо сначала вызвать метод MoveNext.</value>
  </data>
  <data name="ErrorKeyFoundInDictionary" xml:space="preserve">
    <value>Данный ключ уже присутствовал в словаре.</value>
  </data>
  <data name="ErrorQueueIsEmpty" xml:space="preserve">
    <value>В настоящее время очередь пуста.</value>
  </data>
  <data name="ErrorStackIsEmpty" xml:space="preserve">
    <value>Стек в настоящее время пуст.</value>
  </data>
  <data name="LimitArgumentNegativeExceptionDefaultTextNoArgument" xml:space="preserve">
    <value>Аргумент Limit должен быть неотрицательным целым числом.</value>
  </data>
  <data name="LimitArgumentNegativeExceptionDefaultTextWithArgument" xml:space="preserve">
    <value>Аргумент Limit должен быть неотрицательным целым числом. Имя аргумента: {0}</value>
  </data>
  <data name="ErrorPersistedQueuesCannotBeCopied" xml:space="preserve">
    <value>Попытка скопировать все содержимое сохраненной очереди не поддерживается.</value>
  </data>
  <data name="ErrorPersistedQueuesCannotBeEnumerated" xml:space="preserve">
    <value>Попытка перечислить сохраненную очередь не поддерживается.</value>
  </data>
  <data name="ErrorTheQueueIsCurrentlyInDisasterMode" xml:space="preserve">
    <value>Очередь в настоящее время находится в аварийном режиме, операции перечисления отключены по замыслу.</value>
  </data>
  <data name="ErrorArgumentInRange" xml:space="preserve">
    <value>Аргумент находится в нежелательном диапазоне.</value>
  </data>
  <data name="ErrorArgumentNotGreaterThan" xml:space="preserve">
    <value>Аргумент не превышает желаемого значения.</value>
  </data>
  <data name="ErrorArgumentNotGreaterThanOrEqualTo" xml:space="preserve">
    <value>Аргумент не меньше или равен желаемому значению.</value>
  </data>
  <data name="ErrorArgumentNotInRange" xml:space="preserve">
    <value>Аргумент не находится в нужном диапазоне.</value>
  </data>
  <data name="ErrorArgumentNotLessThan" xml:space="preserve">
    <value>Аргумент не меньше желаемого значения.</value>
  </data>
  <data name="ErrorArgumentNotLessThanOrEqualTo" xml:space="preserve">
    <value>Аргумент не меньше или равен желаемому значению.</value>
  </data>
  <data name="ErrorArgumentNotNegative" xml:space="preserve">
    <value>Аргумент не является отрицательным числом.</value>
  </data>
  <data name="ErrorArgumentNotNegativeInteger" xml:space="preserve">
    <value>Аргумент не является отрицательным целым числом.</value>
  </data>
  <data name="DictionaryItemAlreadyExists" xml:space="preserve">
    <value>Элемент с таким же ключом уже существует в этом словаре.</value>
  </data>
  <data name="ItemAlreadyCapturedIntoUndoContextException" xml:space="preserve">
    <value>Операция не может быть завершена, так как текущий элемент захвачен существующим контекстом отмены.</value>
  </data>
  <data name="ItemIsInEditModeExceptionDefaultMessage" xml:space="preserve">
    <value>Операция не может быть завершена, так как текущий элемент находится в режиме редактирования.</value>
  </data>
  <data name="ItemNotCapturedIntoUndoContextException" xml:space="preserve">
    <value>Операция не может быть завершена, так как текущий элемент не попадает в существующий контекст отмены.</value>
  </data>
  <data name="ItemNotInEditModeExceptionDefaultMessage" xml:space="preserve">
    <value>Операция не может быть завершена, так как текущий элемент не находится в режиме редактирования.</value>
  </data>
  <data name="NoHistoryLevelsException" xml:space="preserve">
    <value>Стеки отмены/повтора не могут быть инициализированы, так как не определены уровни истории.</value>
  </data>
  <data name="OperationItemTypeError" xml:space="preserve">
    <value>Тип аргумента не совместим со списком.</value>
  </data>
  <data name="TheCollectionIsCapturedIntoAContextItCannotStartAnExplicitTransaction" xml:space="preserve">
    <value>Коллекция записывается в контекст, она не может запустить явную транзакцию.</value>
  </data>
  <data name="TheGivenCollectionToRemoveIsNotContainedInTheInitialCollection" xml:space="preserve">
    <value>Заданная коллекция для удаления не содержится в исходной коллекции.</value>
  </data>
  <data name="ThereAlreadyIsAnOpenUndoTransaction" xml:space="preserve">
    <value>Уже существует открытая транзакция отмены.</value>
  </data>
</root>