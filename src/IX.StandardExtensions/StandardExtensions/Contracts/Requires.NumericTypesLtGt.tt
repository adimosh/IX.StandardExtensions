<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\..\..\opt\tt\NumericTypes.tt" #><#@ include file="..\..\..\..\opt\tt\TypeNamesFixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="Requires.NumericTypesLtGt.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System.Runtime.CompilerServices;

namespace IX.StandardExtensions.Contracts
{
    /// <summary>
    ///     Methods for approximating the works of contract-oriented programming.
    /// </summary>
    public static partial class Requires
    {<#
/* STAGE DESCRIPTION:
 * 1. Requires.LessThan
 * 2. Requires.LessThanOrEqualTo
 * 3. Requires.GreaterThan
 * 4. Requires.GreaterThanOrEqualTo
 * 5. Requires.LessThan with out
 * 6. Requires.LessThanOrEqualTo with out
 * 7. Requires.GreaterThan with out
 * 8. Requires.GreaterThanOrEqualTo with out
 */
List<string> code = new List<string>();
int stage = 1;

for (int i = 0; i < types.Length; i++)
{
    var typ = types[i];
    string fullTypeName = GetTypeUsableName(typ);
    bool isReferencing = (stage >= 5);
    bool lessThan = (stage == 1 || stage == 2 || stage == 5 || stage == 6);
    bool isEqual = (stage % 2 == 0);
#>

        /// <summary>
        ///     Called when a <#= isReferencing ? "field initialization" : "contract" #> requires that a numeric argument of type <see cref="<#= fullTypeName #>" /> is
<#
        if (lessThan)
        {
            if (isEqual)
            {
#>
        ///     less than or equal to a desired value.
<#
            }
            else
            {
#>
        ///     less than a desired value.
<#
            }
        }
        else
        {
            if (isEqual)
            {
#>
        ///     greater than or equal to a desired value.
<#
            }
            else
            {
#>
        ///     greater than a desired value.
<#
            }
        }
#>
        /// </summary>
<#
        if (isReferencing)
        {
#>
        /// <param name="field">
        ///     The field that the argument is initializing.
        /// </param>
<#
        }
#>
        /// <param name="argument">
        ///     The numeric argument.
        /// </param>
        /// <param name="desiredComparisonValue">
        ///     The desired comparison value.
        /// </param>
        /// <param name="argumentName">
        ///     The argument name.
        /// </param>
        /// <exception cref="ArgumentNot<#= lessThan ? "LessThan" : "GreaterThan" #><#= isEqual ? "OrEqualTo" : string.Empty #>Exception">
<#
        if (lessThan)
        {
            if (isEqual)
            {
#>
        ///     The argument is not less than or equal to the desired comparison value.
<#
            }
            else
            {
#>
        ///     The argument is not less than to the desired comparison value.
<#
            }
        }
        else
        {
            if (isEqual)
            {
#>
        ///     The argument is not greater than or equal to the desired comparison value.
<#
            }
            else
            {
#>
        ///     The argument is not greater than to the desired comparison value.
<#
            }
        }
#>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Performance",
            "EPS02:Non-readonly struct used as in-parameter",
            Justification = "<#= fullTypeName #> is a primitive type that the compiler can handle.")]
        public static void <#= lessThan ? "LessThan" : "GreaterThan" #><#= isEqual ? "OrEqualTo" : string.Empty #>(
<#
        if (isReferencing)
        {
#>
            out <#= fullTypeName #> field,
<#
        }
#>
            in <#= fullTypeName #> argument,
            in <#= fullTypeName #> desiredComparisonValue,
            string argumentName)
        {
            if (argument <#= lessThan ? ">" : "<" #><#= isEqual ? string.Empty : "=" #> desiredComparisonValue)
            {
                throw new ArgumentNot<#= lessThan ? "LessThan" : "GreaterThan" #><#= isEqual ? "OrEqualTo" : string.Empty #>Exception(argumentName);
            }
<#
        if (isReferencing)
        {
#>

            field = argument;
<#
        }
#>
        }
<#

    stage++;
    if (stage == 9)
    {
        stage = 1;
    }
    else
    {
        i--;
    }
}
#>
    }
}