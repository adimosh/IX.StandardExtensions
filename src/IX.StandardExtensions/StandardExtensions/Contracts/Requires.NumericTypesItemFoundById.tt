<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\..\..\opt\tt\NumericTypes.tt" #><#@ include file="..\..\..\..\opt\tt\TypeNamesFixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="Requires.NumericTypesItemFoundById.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.CompilerServices;
using IX.Abstractions.Entities;
using JetBrains.Annotations;

namespace IX.StandardExtensions.Contracts;

/// <summary>
///     Methods for approximating the works of contract-oriented programming.
/// </summary>
public static partial class Requires
{<#
for (int i = 0; i < types.Length; i++)
{
    var typ = types[i];
    string fullTypeName = GetTypeUsableName(typ);
#>

    /// <summary>
    ///     Called when a contract requires that an item is found by its identifier.
    /// </summary>
    /// <param name="source">The items source.</param>
    /// <param name="id">The identifier to seek.</param>
    /// <param name="sourceName">The name of the source collection to seek in.</param>
    /// <param name="idName">The name of the identifier parameter.</param>
    /// <typeparam name="TItem">The type of keyed item in the collection.</typeparam>
    /// <returns>The item that was found.</returns>
    /// <exception cref="ArgumentNullException">Either the source collection or the identifier are <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
    /// <exception cref="ArgumentNotPositiveException">The supplied identifier is not, as convention dictates, a positive number.</exception>
    /// <exception cref="IdCorrespondsToNoItemException">There is no usable item in the source collection that can be fetched by the supplied identifier.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [ContractAnnotation("source:null => halt; id:null => halt")]
    [AssertionMethod]
    [SuppressMessage(
        "Performance",
        "HAA0301:Closure Allocation Source",
        Justification = "LINQ used, unavoidable.")]
    [SuppressMessage(
        "Performance",
        "HAA0303:Lambda or anonymous method in a generic method allocates a delegate instance",
        Justification = "LINQ used, unavoidable.")]
    [SuppressMessage(
        "Performance",
        "HAA0302:Display class allocation to capture closure",
        Justification = "LINQ used, unavoidable.")]
    public static TItem ItemFoundById<TItem>(
        IEnumerable<TItem> source,
        <#= fullTypeName #> id,
        [CallerArgumentExpression("source")]
        string sourceName = "source",
        [CallerArgumentExpression("id")]
        string idName = "id")
        where TItem : IKeyedEntity<<#= fullTypeName #>>
    {
        if (source == null)
        {
            throw new ArgumentNullException(sourceName);
        }

        if (id <= 0)
        {
            throw new ArgumentNotPositiveException(idName);
        }

        var item = source.FirstOrDefault(p => p.Id == id);

        if (item is null || EqualityComparer<TItem>.Default.Equals(item, default!))
        {
            throw new IdCorrespondsToNoItemException(idName);
        }

        return item;
    }
<#
}
#>
}