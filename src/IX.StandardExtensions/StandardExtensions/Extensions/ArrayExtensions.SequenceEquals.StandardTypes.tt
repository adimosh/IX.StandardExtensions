<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\..\..\opt\tt\StandardTypes.tt" #><#@ include file="..\..\..\..\opt\tt\TypeNamesFixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="ArrayExtensions.SequenceEquals.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Diagnostics.CodeAnalysis;

namespace IX.StandardExtensions.Extensions
{
    /// <summary>
    ///     Extensions for array types.
    /// </summary>
    public static partial class ArrayExtensions
    {<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        ///     Determines whether two arrays have all members in sequence equal to one another.
        /// </summary>
        /// <param name="left">The left operand array.</param>
        /// <param name="right">The right operand array.</param>
        /// <returns>
        ///     <see langword="true"/> if the two arrays have the same length and each element at each position
        ///     in one array is equal to the equivalent in the other, <see langword="false"/> otherwise.
        /// </returns>
        [SuppressMessage(
            "CodeQuality",
            "IDE0079:Remove unnecessary suppression",
            Justification = "Some developers use ReSharper.")]
        [SuppressMessage(
            "ReSharper",
            "LoopCanBeConvertedToQuery",
            Justification = "We don't want this. Instead, we want maximum performance out of the array.")]
<# if (typ == typeof(float) || typ == typeof(double))
{ #>
        [SuppressMessage(
            "ReSharper",
            "CompareOfFloatsByEqualityOperator",
            Justification = "This is raw comparison and equation, we're not interested in the results of possible tolerance.")]
<# } #>
        public static bool SequenceEquals(
            this <#= fullTypeName #>[]? left,
            <#= fullTypeName #>[]? right)
        {
            if (left == null)
            {
                return right == null;
            }

            if (right == null)
            {
                return false;
            }

            if (left.Length != right.Length)
            {
                return false;
            }

            for (var i = 0; i < left.Length; i++)
            {
                if (left[i] != right[i])
                {
                    return false;
                }
            }

            return true;
        }
<# if (typ == typeof(float) || typ == typeof(double))
{ #>

        /// <summary>
        ///     Determines whether two arrays have all members in sequence equal to one another.
        /// </summary>
        /// <param name="left">The left operand array.</param>
        /// <param name="right">The right operand array.</param>
        /// <param name="tolerance">The tolerance under which to consider values equal.</param>
        /// <returns>
        ///     <see langword="true"/> if the two arrays have the same length and each element at each position
        ///     in one array is within tolerance to the equivalent in the other, <see langword="false"/> otherwise.
        /// </returns>
        [SuppressMessage(
            "CodeQuality",
            "IDE0079:Remove unnecessary suppression",
            Justification = "Some developers use ReSharper.")]
        [SuppressMessage(
            "ReSharper",
            "LoopCanBeConvertedToQuery",
            Justification = "We don't want this. Instead, we want maximum performance out of the array.")]
        public static bool SequenceEquals(
            this <#= fullTypeName #>[]? left,
            <#= fullTypeName #>[]? right,
            <#= fullTypeName #> tolerance)
        {
            if (left == null)
            {
                return right == null;
            }

            if (right == null)
            {
                return false;
            }

            if (left.Length != right.Length)
            {
                return false;
            }

            tolerance = Math.Abs(tolerance);

            for (var i = 0; i < left.Length; i++)
            {
                if (Math.Abs(left[i] - right[i]) > tolerance)
                {
                    return false;
                }
            }

            return true;
        }
<# } #>
<#
}
#>
    }
}