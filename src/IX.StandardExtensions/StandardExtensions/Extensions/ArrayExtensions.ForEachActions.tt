<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="ArrayExtensions.ForEachActions.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Threading;
using System.Threading.Tasks;
using IX.StandardExtensions.Contracts;

namespace IX.StandardExtensions.Extensions
{
    /// <summary>
    ///     Extensions for array types.
    /// </summary>
    public static partial class ArrayExtensions
    {<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TParam{j}";
        names[idx] = $"param{j}";
        nameTypes[idx] = $"TParam{j} param{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join($",{Environment.NewLine}            ", nameTypes);
#>

        /// <summary>
        ///     Executes an action for each one of the elements of an array.
        /// </summary>
        /// <typeparam name="TItem">The array type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The enumerable source.</param>
        /// <param name="action">The action to execute.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <exception cref="ArgumentNullException">
        ///     Thrown when <paramref name="source" /> or <paramref name="action" /> is
        ///     <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).
        /// </exception>
        public static void ForEach<TItem, <#= paramTypes #>>(
            this TItem[] source,
            Action<TItem, <#= paramTypes #>> action,
            <#= paramNameTypes #>)
        {
            Requires.NotNull(source);
            Requires.NotNull(action);

            for (var i = 0; i < source.Length; i++)
            {
                action(source[i], <#= paramNames #>);
            }
        }

        /// <summary>
        ///     Asynchronously executes an action for each one of the elements of an array.
        /// </summary>
        /// <typeparam name="TItem">The array type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The enumerable source.</param>
        /// <param name="action">The action to execute.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The cancellation token for this operation.</param>
        /// <exception cref="ArgumentNullException">
        ///     Thrown when <paramref name="source" /> or <paramref name="action" /> is
        ///     <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).
        /// </exception>
        /// <remarks>
        ///     <para>This method, due to multiple awaits, is considered to be very slow compared to its synchronous version.</para>
        ///     <para>Please make sure to only use this where asynchronicity is required.</para>
        ///     <para>In CPU-intensive operations, only its synchronous counterpart should be used.</para>
        /// </remarks>
        public static async ValueTask ForEachAsync<TItem, <#= paramTypes #>>(
            this TItem[] source,
            Func<TItem, <#= paramTypes #>, Task> action,
            <#= paramNameTypes #>,
            CancellationToken cancellationToken = default)
        {
            Requires.NotNull(source);
            Requires.NotNull(action);

            if (cancellationToken.IsCancellationRequested) return;

            for (var i = 0; i < source.Length; i++)
            {
                await action(source[i], <#= paramNames #>);
                cancellationToken.ThrowIfCancellationRequested();
            }
        }

        /// <summary>
        ///     Asynchronously executes an action for each one of the elements of an array.
        /// </summary>
        /// <typeparam name="TItem">The array type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The enumerable source.</param>
        /// <param name="action">The action to execute.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The cancellation token for this operation.</param>
        /// <exception cref="ArgumentNullException">
        ///     Thrown when <paramref name="source" /> or <paramref name="action" /> is
        ///     <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).
        /// </exception>
        /// <remarks>
        ///     <para>This method, due to multiple awaits, is considered to be very slow compared to its synchronous version.</para>
        ///     <para>Please make sure to only use this where asynchronicity is required.</para>
        ///     <para>In CPU-intensive operations, only its synchronous counterpart should be used.</para>
        /// </remarks>
        public static async ValueTask ForEachAsync<TItem, <#= paramTypes #>>(
            this TItem[] source,
            Func<TItem, <#= paramTypes #>, ValueTask> action,
            <#= paramNameTypes #>,
            CancellationToken cancellationToken = default)
        {
            Requires.NotNull(source);
            Requires.NotNull(action);

            if (cancellationToken.IsCancellationRequested) return;

            for (var i = 0; i < source.Length; i++)
            {
                await action(source[i], <#= paramNames #>);
                cancellationToken.ThrowIfCancellationRequested();
            }
        }

        /// <summary>
        ///     Asynchronously executes an action for each one of the elements of an array.
        /// </summary>
        /// <typeparam name="TItem">The array type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The enumerable source.</param>
        /// <param name="action">The action to execute.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The cancellation token for this operation.</param>
        /// <exception cref="ArgumentNullException">
        ///     Thrown when <paramref name="source" /> or <paramref name="action" /> is
        ///     <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).
        /// </exception>
        /// <remarks>
        ///     <para>This method, due to multiple awaits, is considered to be very slow compared to its synchronous version.</para>
        ///     <para>Please make sure to only use this where asynchronicity is required.</para>
        ///     <para>In CPU-intensive operations, only its synchronous counterpart should be used.</para>
        /// </remarks>
        public static async ValueTask ForEachAsync<TItem, <#= paramTypes #>>(
            this TItem[] source,
            Func<TItem, <#= paramTypes #>, CancellationToken, Task> action,
            <#= paramNameTypes #>,
            CancellationToken cancellationToken = default)
        {
            Requires.NotNull(source);
            Requires.NotNull(action);

            if (cancellationToken.IsCancellationRequested) return;

            for (var i = 0; i < source.Length; i++)
            {
                await action(source[i], <#= paramNames #>, cancellationToken);
                cancellationToken.ThrowIfCancellationRequested();
            }
        }

        /// <summary>
        ///     Asynchronously executes an action for each one of the elements of an array.
        /// </summary>
        /// <typeparam name="TItem">The array type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The enumerable source.</param>
        /// <param name="action">The action to execute.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The cancellation token for this operation.</param>
        /// <exception cref="ArgumentNullException">
        ///     Thrown when <paramref name="source" /> or <paramref name="action" /> is
        ///     <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).
        /// </exception>
        /// <remarks>
        ///     <para>This method, due to multiple awaits, is considered to be very slow compared to its synchronous version.</para>
        ///     <para>Please make sure to only use this where asynchronicity is required.</para>
        ///     <para>In CPU-intensive operations, only its synchronous counterpart should be used.</para>
        /// </remarks>
        public static async ValueTask ForEachAsync<TItem, <#= paramTypes #>>(
            this TItem[] source,
            Func<TItem, <#= paramTypes #>, CancellationToken, ValueTask> action,
            <#= paramNameTypes #>,
            CancellationToken cancellationToken = default)
        {
            Requires.NotNull(source);
            Requires.NotNull(action);

            if (cancellationToken.IsCancellationRequested) return;

            for (var i = 0; i < source.Length; i++)
            {
                await action(source[i], <#= paramNames #>, cancellationToken);
                cancellationToken.ThrowIfCancellationRequested();
            }
        }
<#
}
#>
    }
}