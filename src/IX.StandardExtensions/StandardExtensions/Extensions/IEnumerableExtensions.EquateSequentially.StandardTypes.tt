<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\..\..\opt\tt\StandardTypes.tt" #><#@ include file="..\..\..\..\opt\tt\TypeNamesFixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="IEnumerableExtensions.EquateSequentially.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;
using System.Globalization;
using IX.StandardExtensions.Contracts;

namespace IX.StandardExtensions.Extensions
{
    /// <summary>
    /// Extensions for IEnumerable.
    /// </summary>
    // ReSharper disable once InconsistentNaming - We're doing extensions for IEnumerable
    public static partial class IEnumerableExtensions
    {
#pragma warning disable HAA0401 // Possible allocation of reference type enumerator - This is acceptable, as these are IEnumerable extensions<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        /// Equates two enumerable collections sequentially.
        /// </summary>
        /// <param name="left">The left item of comparison.</param>
        /// <param name="right">The right item of comparison.</param>
        /// <returns>A sequence of comparison results.</returns>
        public static IEnumerable<bool> EquateSequentially(this IEnumerable<<#= fullTypeName #>>? left, IEnumerable<<#= fullTypeName #>>? right)
        {
            if ((left == null) && (right == null))
            {
                yield return true;
                yield break;
            }

            using IEnumerator<<#= fullTypeName #>> leftEnumerator = left?.GetEnumerator() ?? System.Collections.Generic.EmptyEnumerator<<#= fullTypeName #>>.Get();
            using IEnumerator<<#= fullTypeName #>> rightEnumerator = right?.GetEnumerator() ?? System.Collections.Generic.EmptyEnumerator<<#= fullTypeName #>>.Get();

            var leftBool = leftEnumerator.MoveNext();
            var rightBool = rightEnumerator.MoveNext();

            while (leftBool || rightBool)
            {
                var leftCompare = leftBool ? leftEnumerator.Current : default;
                var rightCompare = rightBool ? rightEnumerator.Current : default;

                yield return <#= typ == typeof(string) ? "string.Compare(leftCompare, rightCompare, CultureInfo.CurrentCulture, CompareOptions.None) == 0" : "leftCompare == rightCompare" #>;

                leftBool = leftEnumerator.MoveNext();
                rightBool = rightEnumerator.MoveNext();
            }
        }

        /// <summary>
        /// Equates two enumerable collections sequentially, skipping items defined as &quot;empty&quot;.
        /// </summary>
        /// <param name="left">The left item of comparison.</param>
        /// <param name="right">The right item of comparison.</param>
        /// <param name="determineEmpty">A function that determines whether an item is &quot;empty&quot; or not.</param>
        /// <returns>A sequence of comparison results.</returns>
        public static IEnumerable<bool> EquateSequentially(this IEnumerable<<#= fullTypeName #>>? left, IEnumerable<<#= fullTypeName #>>? right, Func<<#= fullTypeName #>, bool> determineEmpty)
        {
            var localDetermineEmpty = Requires.NotNull(determineEmpty);

            if ((left == null) && (right == null))
            {
                yield return true;
                yield break;
            }

            using IEnumerator<<#= fullTypeName #>> leftEnumerator = left?.GetEnumerator() ?? System.Collections.Generic.EmptyEnumerator<<#= fullTypeName #>>.Get();
            using IEnumerator<<#= fullTypeName #>> rightEnumerator = right?.GetEnumerator() ?? System.Collections.Generic.EmptyEnumerator<<#= fullTypeName #>>.Get();

            var leftBool = EquateSequentiallyMoveNext(leftEnumerator);
            var rightBool = EquateSequentiallyMoveNext(rightEnumerator);

            while (leftBool || rightBool)
            {
                var leftCompare = leftBool ? leftEnumerator.Current : default;
                var rightCompare = rightBool ? rightEnumerator.Current : default;

                yield return leftCompare == rightCompare;

                leftBool = EquateSequentiallyMoveNext(leftEnumerator);
                rightBool = EquateSequentiallyMoveNext(rightEnumerator);
            }

            bool EquateSequentiallyMoveNext(IEnumerator<<#= fullTypeName #>> source)
            {
                init:
                var moved = source.MoveNext();

                if (!moved)
                {
                    return false;
                }

                if (localDetermineEmpty(source.Current))
                {
                    goto init;
                }

                return true;
            }
        }
<#
}
#>
#pragma warning restore HAA0401 // Possible allocation of reference type enumerator
    }
}