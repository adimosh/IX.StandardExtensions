<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorLengthGoesPastArrayLimits" xml:space="preserve">
    <value>The length should be small enough to not result in an operation outside of the bounds of the array.</value>
  </data>
  <data name="ErrorLengthMustBeAPositiveInteger" xml:space="preserve">
    <value>The length should be a positive integer.</value>
  </data>
  <data name="ErrorNotImplementedByDesign" xml:space="preserve">
    <value>This member is not implemented by design.</value>
  </data>
  <data name="ErrorSourceIndexMustPointToALocationWithinTheArray" xml:space="preserve">
    <value>The source index must point to a location within the array.</value>
  </data>
  <data name="ErrorArgumentInvalidType" xml:space="preserve">
    <value>The supplied boxed or polymorphic argument is of a wrong type.</value>
  </data>
  <data name="ErrorStopRetrying" xml:space="preserve">
    <value>The operation that has made a call to this method should stop retrying, as a critical error, a state change or unrecoverable environment conditions guarantee failure on subsequent retries.</value>
  </data>
  <data name="ErrorArgumentNotPositiveInteger" xml:space="preserve">
    <value>The argument is not a positive integer.</value>
  </data>
  <data name="SingleOrDefaultMultipleElements" xml:space="preserve">
    <value>The input sequence contains more than one element.</value>
  </data>
  <data name="AnInvalidSetOfArgumentsWasSpecifiedArgumentNames" xml:space="preserve">
    <value>An invalid set of arguments was specified. Argument names: {0}</value>
  </data>
  <data name="TheProvidedArgumentsDoNotFormAValidRangeOfValuesArguments" xml:space="preserve">
    <value>The provided arguments do not form a valid range of values. Arguments: {0}</value>
  </data>
  <data name="ErrorArgumentNotPositive" xml:space="preserve">
    <value>The argument is not a positive number.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyString" xml:space="preserve">
    <value>The string argument is null (Nothing in Visual Basic) or empty.</value>
  </data>
  <data name="ErrorArgumentNullOrWhiteSpaceString" xml:space="preserve">
    <value>The string argument is null (Nothing in Visual Basic), empty or whitespace-only.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyBinary" xml:space="preserve">
    <value>The argument is null (Nothing in Visual Basic) or an empty byte array.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyCollection" xml:space="preserve">
    <value>The collection argument is null (Nothing in Visual Basic) or empty.</value>
  </data>
  <data name="AContractConditionIsNotBeingMet" xml:space="preserve">
    <value>A contract condition is not being met.</value>
  </data>
  <data name="ErrorArgumentNotValidIndex" xml:space="preserve">
    <value>The argument cannot be considered a valid index.</value>
  </data>
  <data name="ErrorArgumentNotValidLength" xml:space="preserve">
    <value>The argument cannot be considered a valid length, as it has to be a positive integer less than the length of the collection it is used for.</value>
  </data>
  <data name="ErrorArgumentNullOrEmptyArray" xml:space="preserve">
    <value>The array argument is null (Nothing in Visual Basic), or empty, or does not have the required length.</value>
  </data>
  <data name="ErrorArgumentDoesNotMatch" xml:space="preserve">
    <value>The argument does not match the expected pattern, or could not be implicitly matched to any supported input.</value>
  </data>
  <data name="ErrorArgumentInvalidPath" xml:space="preserve">
    <value>The argument supplied cannot be used as a valid path.</value>
  </data>
  <data name="MoveNextNotInvoked" xml:space="preserve">
    <value>You must first invoke the MoveNext method before you can call Current.</value>
  </data>
  <data name="ErrorKeyFoundInDictionary" xml:space="preserve">
    <value>The given key was already present in the dictionary.</value>
  </data>
  <data name="ErrorQueueIsEmpty" xml:space="preserve">
    <value>The queue is currently empty.</value>
  </data>
  <data name="ErrorStackIsEmpty" xml:space="preserve">
    <value>The stack is currently empty.</value>
  </data>
  <data name="LimitArgumentNegativeExceptionDefaultTextNoArgument" xml:space="preserve">
    <value>Limit argument must be a non-negative integer.</value>
  </data>
  <data name="LimitArgumentNegativeExceptionDefaultTextWithArgument" xml:space="preserve">
    <value>Limit argument must be a non-negative integer. Argument name: {0}</value>
  </data>
  <data name="ErrorPersistedQueuesCannotBeCopied" xml:space="preserve">
    <value>Attempting to copy the entire contents of a persisted queue is not a supported operation.</value>
  </data>
  <data name="ErrorPersistedQueuesCannotBeEnumerated" xml:space="preserve">
    <value>Attempting to enumerate a persisted queue is not a supported operation.</value>
  </data>
  <data name="ErrorTheQueueIsCurrentlyInDisasterMode" xml:space="preserve">
    <value>The queue is currently in disaster mode, enumeration operations are disabled by design.</value>
  </data>
  <data name="ErrorArgumentInRange" xml:space="preserve">
    <value>The argument is in the undesired range.</value>
  </data>
  <data name="ErrorArgumentNotGreaterThan" xml:space="preserve">
    <value>The argument is not greater than a desired value.</value>
  </data>
  <data name="ErrorArgumentNotGreaterThanOrEqualTo" xml:space="preserve">
    <value>The argument is not less than or equal to a desired value.</value>
  </data>
  <data name="ErrorArgumentNotInRange" xml:space="preserve">
    <value>The argument is not in the desired range.</value>
  </data>
  <data name="ErrorArgumentNotLessThan" xml:space="preserve">
    <value>The argument is not less than a desired value.</value>
  </data>
  <data name="ErrorArgumentNotLessThanOrEqualTo" xml:space="preserve">
    <value>The argument is not less than or equal to a desired value.</value>
  </data>
  <data name="ErrorArgumentNotNegative" xml:space="preserve">
    <value>The argument is not a negative number.</value>
  </data>
  <data name="ErrorArgumentNotNegativeInteger" xml:space="preserve">
    <value>The argument is not a negative integer.</value>
  </data>
  <data name="DictionaryItemAlreadyExists" xml:space="preserve">
    <value>An item with the same key already exists in this dictionary.</value>
  </data>
  <data name="ItemAlreadyCapturedIntoUndoContextException" xml:space="preserve">
    <value>The operation could not be completed as the current item is trapped by an existing undo context.</value>
  </data>
  <data name="ItemIsInEditModeExceptionDefaultMessage" xml:space="preserve">
    <value>The operation could not be completed as the current item is in edit mode.</value>
  </data>
  <data name="ItemNotCapturedIntoUndoContextException" xml:space="preserve">
    <value>The operation could not be completed as the current item is not trapped into an existing undo context.</value>
  </data>
  <data name="ItemNotInEditModeExceptionDefaultMessage" xml:space="preserve">
    <value>The operation could not be completed as the current item is not in edit mode.</value>
  </data>
  <data name="NoHistoryLevelsException" xml:space="preserve">
    <value>No undo/redo stacks could be initialized, as there are no history levels defined.</value>
  </data>
  <data name="OperationItemTypeError" xml:space="preserve">
    <value>The type of the argument is not a compatible type to the list.</value>
  </data>
  <data name="TheCollectionIsCapturedIntoAContextItCannotStartAnExplicitTransaction" xml:space="preserve">
    <value>The collection is captured into a context, it cannot start an explicit transaction.</value>
  </data>
  <data name="TheGivenCollectionToRemoveIsNotContainedInTheInitialCollection" xml:space="preserve">
    <value>The given collection to remove is not contained in the initial collection.</value>
  </data>
  <data name="ThereAlreadyIsAnOpenUndoTransaction" xml:space="preserve">
    <value>There already is an open undo transaction.</value>
  </data>
  <data name="UndoAndRedoOperationsAreNotSupportedWhileAnExplicitTransactionBlockIsOpen" xml:space="preserve">
    <value>Undo and Redo operations are not supported while an explicit transaction block is open.</value>
  </data>
  <data name="AttemptingToAccessAnUndoRedoStackWhileUndoIsDisabledIsNotAllowed" xml:space="preserve">
    <value>Attempting to access an undo/redo stack while undo is disabled is not allowed.</value>
  </data>
  <data name="TheLevelDictionaryHasNoMoreItems" xml:space="preserve">
    <value>The level dictionary has no more items.</value>
  </data>
  <data name="ErrorIdCorrespondsToNoItem" xml:space="preserve">
    <value>The identifier corresponds to no item.</value>
  </data>
  <data name="ThereIsNoCurrentSynchronizationContextToAttemptCapturing" xml:space="preserve">
    <value>There is no current synchronization context to attempt capturing.</value>
  </data>
</root>